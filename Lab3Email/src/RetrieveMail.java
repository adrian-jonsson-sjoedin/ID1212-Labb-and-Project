/*
Ett program som ansluter till ditt @kth.se-konto, listar innehållet och sedan
 hämtar ett godtyckligt mejl. Du får (ännu) inte använda JavaMail utan ska istället
 göra det "manuellt" enligt IMAP-protokollet.

 I detta fall (IMAP med SSL/TLS) börjar du med en krypterad session.
 Denna sida var bra: https://www.atmail.com/blog/imap-101-manual-imap-sessions/


Inställningar för att ta emot e-post (inkommande)
Server: webmail.kth.se
Port: 993
Protokoll: SSL/TLS
Autentisering: Normalt lösenord
 */

import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.Scanner;

public class RetrieveMail {
    private static final String HOST = "webmail.kth.se";
    private static final int PORT = 993;
    private static final String credentials = "src/credentials.txt";
    private String userName;
    private String password;
    private static final String LOGIN_TAG = "A01", SELECT_TAG = "A02", FETCH_TAG = "A03";
    private BufferedReader incoming;
    private PrintStream outgoing;

    /*
    2.2.1.  Client Protocol Sender and Server Protocol Receiver

       The client command begins an operation.  Each client command is
       prefixed with an identifier (typically a short alphanumeric string,
       e.g., A0001, A0002, etc.) called a "tag".  A different tag is
       generated by the client for each command.

       You login using the 'LOGIN USERNAME PASSWORD\n\r' command
    */

    /*
    With PrintWriter Java automatically appends the systems line terminator, which in my case on
    Linux Fedora is just '\n'. This will not work since IMAP require each line to terminate with '\r\n'.
    Took me a while to figure this out.
     */
    public RetrieveMail() {
        try {
            SSLSocket sslSocket = (SSLSocket) SSLSocketFactory.getDefault().createSocket(HOST, PORT);
            //For some reason it did not work with PrintWriter. See above for the reason
            this.outgoing = new PrintStream(sslSocket.getOutputStream());
            this.incoming = new BufferedReader(new InputStreamReader(sslSocket.getInputStream(), StandardCharsets.UTF_8));
        } catch (IOException exception) {
            System.err.println("Error setting up secure socket and I/O streams: " + exception.getMessage());
            exception.printStackTrace();
        }
        try (Scanner file = new Scanner(new File(credentials))) {
            String tempUserName = file.nextLine();
            this.userName = tempUserName + "@ug.kth.se";
            this.password = file.nextLine();
        } catch (FileNotFoundException e) {
            System.err.println("File to read from could not be found.");
        }
    }

    public static void main(String[] args) {
        RetrieveMail retrieveMail = new RetrieveMail();
        try {
            retrieveMail.login();
            retrieveMail.selectInbox();
            retrieveMail.fetchMail();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void login() throws IOException {
        System.out.println(LOGIN_TAG + " login " + this.userName + " **********");
        this.outgoing.println(LOGIN_TAG + " login " + this.userName + " " + this.password + "\r\n");
        this.outgoing.flush();
        readResponse(LOGIN_TAG);
    }

    private void selectInbox() throws IOException {
        System.out.printf(SELECT_TAG + " select inbox\r\n");
        this.outgoing.println(SELECT_TAG + " select inbox\r\n");
        this.outgoing.flush();
        readResponse(SELECT_TAG);
    }

    private void fetchMail() throws IOException {
        /*
          2 This is the message sequence number. In IMAP, each message in a mailbox is assigned a
          sequence number. Here, the command is requesting information about the message with sequence
          number 2, which will be the second-oldest (the 2nd) email in the inbox.
          BODY[TEXT]: This is a data item within the FETCH command that specifies the portion of
          the message to retrieve. In this case, it's requesting the textual body of the message.
          The BODY is a part of the IMAP extension that allows clients to request specific parts of
          a message.
         */
        System.out.printf(FETCH_TAG + " fetch 2 body[text]\r\n");
        this.outgoing.println(FETCH_TAG + " fetch 2 body[text]\r\n");
        this.outgoing.flush();
        readResponse(FETCH_TAG);
    }

    private void readResponse(String tag) throws IOException {
        String response;
        do {
            response = this.incoming.readLine();
            System.out.println(response);
        } while (!response.startsWith(tag + " OK"));
        //the last response line back from mail server will be on the form 'Tag OK'
    }
}